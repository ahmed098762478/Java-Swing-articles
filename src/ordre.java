
import Db.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author AYMAN
 */
public class ordre extends javax.swing.JFrame {

    private int ordrePk = 0;

    /**
     * Creates new form ordre
     */
    public ordre() {
        initComponents();
        setLocationRelativeTo(null);

    }

    private boolean validateFields() {

        if (!txtquan.getText().equals("") && !txtville.getText().equals("") && !txtnum.getText().equals("") && !txtcode.getText().equals("") && !txtTel.getText().equals("")) {
            return false;
        } else {
            return true;
        }
    }

    private void getClient() {

        try {
            Connection con = DatabaseUtil.getConnection();
            Statement stmt = con.createStatement();

            String sql = "SELECT *FROM customer";
            ResultSet rs = stmt.executeQuery(sql);
            comboC.removeAllItems();
            while (rs.next()) {
                comboC.addItem(rs.getString("ClientID") + "-" + rs.getString("LastName"));

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void getProduct() {

        try {
            Connection con = DatabaseUtil.getConnection();
            Statement stmt = con.createStatement();

            String sql = "SELECT *FROM Product";
            ResultSet rs = stmt.executeQuery(sql);
            comboP.removeAllItems();
            while (rs.next()) {
                comboP.addItem(rs.getString("ProductID") + "-" + rs.getString("ArticleName"));

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabCommande = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtquan = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtnum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtcode = new javax.swing.JTextField();
        txtville = new javax.swing.JTextField();
        txtTel = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboC = new javax.swing.JComboBox<>();
        comboP = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Impact", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Commande management ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 450, -1));

        tabCommande.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "quantit√©", "numero depot", "code depot", "ville depot", "numero tel de depo", "client id", "client nom", "product id", "product nom", "Prix total"
            }
        ));
        tabCommande.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabCommandeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabCommande);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 191, 744, 201));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("quantite_commandee ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 109, 148, -1));

        txtquan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtquan, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 141, 192, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("numero_depot ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 187, 102, -1));

        txtnum.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 225, 192, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("code_depot ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 269, 83, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("ville_depot ");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 351, 78, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText(" numero_telephone_depot");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 448, 175, -1));

        txtcode.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 307, 192, -1));

        txtville.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtville, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 396, 192, -1));

        txtTel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getContentPane().add(txtTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 490, 192, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("client ");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 534, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("produit ");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 540, 54, -1));

        comboC.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        comboC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(comboC, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 580, -1, 30));

        comboP.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        comboP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(comboP, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 580, -1, 30));

        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSave.setText("ajouter ");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 410, 82, -1));

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("modifier");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(399, 411, 88, -1));

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setText("supprimer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 410, 99, -1));

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setText("vider");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(744, 410, -1, -1));

        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setText("fermer");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(904, 410, 76, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("rechercher");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 109, 72, -1));

        txtSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        getContentPane().add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 147, 293, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/50-Beautiful-and-Minimalist-Presentation-Backgrounds-042.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1010, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabCommandeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabCommandeMouseClicked
        // TODO add your handling code here:
        int index = tabCommande.getSelectedRow();
        TableModel model = tabCommande.getModel();
        String id = model.getValueAt(index, 0).toString();
        ordrePk = Integer.parseInt(id);

        String quan = model.getValueAt(index, 1).toString();
        txtquan.setText(quan);

        String num = model.getValueAt(index, 2).toString();
        txtnum.setText(num);
        String code = model.getValueAt(index, 3).toString();
        txtcode.setText(code);
        String ville = model.getValueAt(index, 4).toString();
        txtville.setText(ville);
        String tel = model.getValueAt(index, 5).toString();
        txtTel.setText(tel);

        comboC.removeAllItems();
        comboP.removeAllItems();

        String cID = model.getValueAt(index, 7).toString();
        String cName = model.getValueAt(index, 8).toString();
        comboC.addItem(cID + "-" + cName);

        String pID = model.getValueAt(index, 9).toString();
        String pName = model.getValueAt(index, 10).toString();
        comboP.addItem(pID + "-" + pName);
        try {
            Connection con = DatabaseUtil.getConnection();
            Statement stmt = con.createStatement();

            String sql = "SELECT * FROM customer";
            String sqlu = "SELECT * FROM Product";

            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                comboC.addItem(rs.getInt("ClientID") + "-" + rs.getString("LastName"));
            }

            rs.close();  // Close the first result set before opening the second one

            ResultSet ru = stmt.executeQuery(sqlu);

            while (ru.next()) {
                comboP.addItem(ru.getInt("ProductID") + "-" + ru.getString("ArticleName"));
            }

            ru.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);


    }//GEN-LAST:event_tabCommandeMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:

        DefaultTableModel md = (DefaultTableModel) tabCommande.getModel();
        md.setRowCount(0);

        try {
            Connection con = DatabaseUtil.getConnection();
            Statement stmt = con.createStatement();

            String sql = "SELECT * FROM ordre INNER JOIN Product ON ordre.ProductID = Product.ProductID INNER JOIN customer ON ordre.ClientID = customer.ClientID;";
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {

                md.addRow(new Object[]{
                    rs.getInt("CommandeID"),
                    rs.getInt("quantite_commandee"),
                    rs.getString("numero_depot"),
                    rs.getString("code_depot"),
                    rs.getString("ville_depot"),
                    rs.getString("numero_telephone_depot"),
                    rs.getInt("ClientID"),
                    rs.getString("LastName"),
                    rs.getInt("ProductID"),
                    rs.getString("ArticleName"),
                    rs.getInt("TotalPrice"),});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        btnUpdate.setEnabled(false);

        getProduct();
        getClient();
    }//GEN-LAST:event_formComponentShown

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        String Cl = (String) comboC.getSelectedItem();
        String clID[] = Cl.split("-", 0);
        String prId = (String) comboP.getSelectedItem();
        String proid[] = prId.split("-", 0);

        String quan = txtquan.getText();
        String num = txtnum.getText();
        String code = txtcode.getText();
        String ville = txtville.getText();
        String tele = txtTel.getText();

        if (validateFields()) {
            JOptionPane.showMessageDialog(null, "All fields are required");
        } else {
            try {
                Connection con = DatabaseUtil.getConnection();

                // Retrieve unit price and stock quantity from the product table
                PreparedStatement productPs = con.prepareStatement("SELECT UnitPrice, StockQuantity FROM Product WHERE ProductID = ?");
                productPs.setString(1, proid[0]);
                ResultSet productResult = productPs.executeQuery();

                int unitPrice = 0;
                int stockQuantity = 0;

                if (productResult.next()) {
                    unitPrice = productResult.getInt("UnitPrice");
                    stockQuantity = productResult.getInt("StockQuantity");
                }

                int requestedQuantity = Integer.parseInt(quan);

                // Check if requested quantity is available in stock
                if (requestedQuantity > stockQuantity) {
                    JOptionPane.showMessageDialog(null, "Error: Insufficient stock quantity");
                    return; // Stop processing if there's not enough stock
                }

                int totalPrice = requestedQuantity * unitPrice;

                // Insert data into the ordre table
                PreparedStatement ordrePs = con.prepareStatement("INSERT INTO ordre (quantite_commandee, numero_depot, code_depot, ville_depot, numero_telephone_depot, ClientID, ProductID, TotalPrice) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");

                ordrePs.setString(1, quan);
                ordrePs.setString(2, num);
                ordrePs.setString(3, code);
                ordrePs.setString(4, ville);
                ordrePs.setString(5, tele);
                ordrePs.setString(6, clID[0]);
                ordrePs.setString(7, proid[0]);
                ordrePs.setInt(8, totalPrice);

                ordrePs.executeUpdate();

                // Update stock quantity in the product table
                int newStockQuantity = stockQuantity - requestedQuantity;
                PreparedStatement updateStockPs = con.prepareStatement("UPDATE Product SET StockQuantity = ? WHERE ProductID = ?");
                updateStockPs.setInt(1, newStockQuantity);
                updateStockPs.setString(2, proid[0]);
                updateStockPs.executeUpdate();

                JOptionPane.showMessageDialog(null, "commande added successfully");
                new ordre().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        String Cl = (String) comboC.getSelectedItem();
        String clID[] = Cl.split("-", 0);
        String prId = (String) comboP.getSelectedItem();
        String proid[] = prId.split("-", 0);

        String quan = txtquan.getText();
        String num = txtnum.getText();
        String code = txtcode.getText();
        String ville = txtville.getText();
        String tele = txtTel.getText();

        if (validateFields()) {
            JOptionPane.showMessageDialog(null, "All fields are required");
        } else {
            try {
                Connection con = DatabaseUtil.getConnection();

                // Retrieve stock quantity from the product table
                PreparedStatement stockPs = con.prepareStatement("SELECT StockQuantity FROM Product WHERE ProductID = ?");
                stockPs.setString(1, proid[0]);
                ResultSet stockResult = stockPs.executeQuery();

                int stockQuantity = 0;

                if (stockResult.next()) {
                    stockQuantity = stockResult.getInt("StockQuantity");
                }

                int requestedQuantity = Integer.parseInt(quan);

                // Check if requested quantity is available in stock
                if (requestedQuantity > stockQuantity) {
                    JOptionPane.showMessageDialog(null, "Error: Insufficient stock quantity");
                    return; // Stop processing if there's not enough stock
                }

                // Setting values for the placeholders
                PreparedStatement ordrePs = con.prepareStatement("UPDATE ordre SET quantite_commandee=?, numero_depot=?, code_depot=?, ville_depot=?, numero_telephone_depot=?, TotalPrice=? WHERE ClientID=? AND ProductID=?");
                PreparedStatement unitPricePs = con.prepareStatement("SELECT UnitPrice FROM Product WHERE ProductID = ?");
                unitPricePs.setString(1, proid[0]);
                ResultSet unitPriceResult = unitPricePs.executeQuery();

                int unitPrice = 0;

                if (unitPriceResult.next()) {
                    unitPrice = unitPriceResult.getInt("UnitPrice");
                }

// Calculate the total price
                int totalPrice = Integer.parseInt(quan) * unitPrice;

                // Setting values for the placeholders
                ordrePs.setString(1, quan);
                ordrePs.setString(2, num);
                ordrePs.setString(3, code);
                ordrePs.setString(4, ville);
                ordrePs.setString(5, tele);
                ordrePs.setInt(6, totalPrice);
                ordrePs.setString(7, clID[0]);
                ordrePs.setString(8, proid[0]);

                ordrePs.executeUpdate();
                JOptionPane.showMessageDialog(null, "ordre updated successfully");
                new ordre().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabCommande.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            try {
                // Get the FournisseurID from the selected row
                int fournisseurID = Integer.parseInt(tabCommande.getValueAt(selectedRow, 0).toString());

                // Execute the DELETE SQL query
                Connection con = DatabaseUtil.getConnection();

                PreparedStatement ps = con.prepareStatement("DELETE FROM ordre  WHERE CommandeID= ?");
                ps.setInt(1, fournisseurID);
                ps.executeUpdate();

                // Refresh the table data
                DefaultTableModel model = (DefaultTableModel) tabCommande.getModel();
                model.removeRow(selectedRow);

                JOptionPane.showMessageDialog(this, "Record deleted successfully.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        setVisible(false);
        new ordre().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel md = (DefaultTableModel) tabCommande.getModel();
        md.setRowCount(0);

        try {
            Connection con = DatabaseUtil.getConnection();
            Statement stmt = con.createStatement();
            String sql = "SELECT * FROM ordre "
                    + "INNER JOIN Product ON ordre.ProductID = Product.ProductID "
                    + "INNER JOIN customer ON ordre.ClientID = customer.ClientID "
                    + "WHERE customer.ClientID = " + txtSearch.getText();

            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {

                md.addRow(new Object[]{
                    rs.getInt("CommandeID"),
                    rs.getInt("quantite_commandee"),
                    rs.getString("numero_depot"),
                    rs.getString("code_depot"),
                    rs.getString("ville_depot"),
                    rs.getString("numero_telephone_depot"),
                    rs.getInt("ClientID"),
                    rs.getString("LastName"),
                    rs.getInt("ProductID"),
                    rs.getString("ArticleName"),
                    rs.getInt("TotalPrice"),});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_txtSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ordre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ordre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ordre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ordre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ordre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboC;
    private javax.swing.JComboBox<String> comboP;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabCommande;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTel;
    private javax.swing.JTextField txtcode;
    private javax.swing.JTextField txtnum;
    private javax.swing.JTextField txtquan;
    private javax.swing.JTextField txtville;
    // End of variables declaration//GEN-END:variables
}
